#trigger: none
trigger:
- 'main'

variables:
#  buildConfiguration: 'Release'
  leaderboardRepository: 'leaderboard'
  webRepository: 'web'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-20.04'
    #pool: linuxpool
    variables:
    - group: 'Dev'
    workspace:
      clean: all
    steps:
    - task: Docker@2
      displayName: 'Build and push the web image to container registry'
      inputs:
        containerRegistry: 'AKSWorkshopACRConnection'
        repository: '$(webRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.Repository.LocalPath)'
        tags: '$(tag)'
    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        containerRegistry: 'AKSWorkshopACRConnection'
        repository: '$(leaderboardRepository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        buildContext: '$(Build.Repository.LocalPath)'
        tags: '$(tag)'
    - task: CmdLine@2
      inputs:
          script: 'docker rmi -f  $(RegistryName)/$(webRepository):$(tag)'
    - task: CmdLine@2
      inputs:
          script: 'docker rmi -f  $(RegistryName)/$(leaderboardRepository):$(tag)'
        
    - publish: '$(Build.SourcesDirectory)/manifests'
      displayName: Store AKS yaml as artifacts
      artifact: manifests

- stage: 'Deploy_to_Dev'
  displayName: 'Update AKS Cluster'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'Dev'
    variables:
    - group: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests

          - task: replacetokens@5
            displayName: Set namespace and image tags
            inputs:
              rootDirectory: $(Pipeline.Workspace)/manifests
              targetFiles: '**/*.yml'
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'AKSWorkshopCluster'
              namespace: '$(namespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: 'Container Registry Connection'
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'AKSWorkshopCluster'
              namespace: '$(namespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)
              imagePullSecrets: '$(imagePullSecret)'

- stage: 'Deploy_to_Prod'
  displayName: 'Update AKS Cluster Prod Namespace'
  dependsOn: Deploy_to_Dev
  jobs:
  - deployment: Deploy
    displayName: Deploy to Prod Namespace
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'Prod'
    variables:
    - group: 'Prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests

          - task: replacetokens@5
            displayName: Set namespace and image tags
            inputs:
              rootDirectory: $(Pipeline.Workspace)/manifests
              targetFiles: '**/*.yml'
              encoding: 'auto'
              tokenPattern: 'default'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              actionOnNoFiles: 'warn'
              enableTransforms: false
              enableRecursion: false
              useLegacyPattern: false
              enableTelemetry: true

          - task: KubernetesManifest@1
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'AKSWorkshopCluster'
              namespace: '$(namespace)'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: 'Container Registry Connection'
          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'AKSWorkshopCluster'
              namespace: '$(namespace)'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)
              imagePullSecrets: '$(imagePullSecret)'
